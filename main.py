import os
import aiohttp
from dotenv import load_dotenv
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from openai import OpenAI
from bs4 import BeautifulSoup
from docx import Document
from pptx import Presentation
import openai
import base64
import mimetypes
from pyrogram.enums import ParseMode
import datetime
from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, ForeignKey, JSON
from sqlalchemy.orm import sessionmaker, relationship, declarative_base, scoped_session
from sqlalchemy.future import select # –ò—Å–ø–æ–ª—å–∑—É–µ–º select –∏–∑ sqlalchemy.future –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
import asyncio # –ù—É–∂–µ–Ω –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
import aiofiles

single_document_filter = filters.document & ~filters.media_group
single_photo_filter = filters.photo & ~filters.media_group

# –í–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞:
user_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø: {media_group_id: {'messages': [msg1, msg2,...], 'timer_task': task_handle}}
media_group_buffers = {}
# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
buffer_lock = asyncio.Lock()
# –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≥—Ä—É–ø–ø—ã (—á—Ç–æ–±—ã —É—Å–ø–µ–ª–∏ –ø—Ä–∏–π—Ç–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
MEDIA_GROUP_DELAY = 2.0
# Telegram max length per message
MAX_LENGTH = 4096

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GEMINI_API_KEY = os.getenv("GOOGLE_API")
DEEPSEEK = os.getenv("DEEPSEEK_API")
GROQ_API = os.getenv("GROQ_API")
GROK_API = os.getenv("GROK_API")
GLM_API = os.getenv("GLM_API")

# –§–∞–π–ª—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
MODEL_CATEGORIES = {
    "openai": {
        "title": "üß† –ú–æ–¥–µ–ª–∏ OpenAI",
        "models": {
            "gpt-4o-mini": "GPT-4o mini ",
            "gpt-4o": "GPT-4o",
            "gpt-4.1": "GPT-4.1",
            "gpt-4.1-mini": "GPT-4.1 Mini",
            "gpt-4.1-nano": "GPT-4.1 Nano",
            "o4-mini": "o4 Mini",
            "o3": "o3",
            "o3-pro": "o3-pro"
        }
    },
    "gemini": {
        "title": "üöÄ –ú–æ–¥–µ–ª–∏ Gemini",
        "models": {
            "gemini-2.5-pro": "Gemini 2.5 pro",
            "gemini-2.5-flash": "Gemini 2.5 Flash  üöÄ",
            "gemini-2.0-flash": "Gemini 2.0 flash üåü",
            "gemini-2.0-flash-lite": "Gemini 2.0 flash Lite ‚ö°"
        }
    },
    "deepseek": {
        "title": "üß™ –ú–æ–¥–µ–ª–∏ DeepSeek",
        "models": {
            "deepseek-chat": "DeepSeek Chat ü§ñ",
            "deepseek-reasoner": "DeepSeek Reasoner üß†",
            "deepseek-r1-distill-llama-70b": "DeepSeek R1 Distill üß™ü¶ô"
        }
    },
    "llama": {
        "title": "ü¶ô –ú–æ–¥–µ–ª–∏ LLaMA & Mistral",
        "models": {
            "mistral-saba-24b": "Mistral Saba 24B üå¨Ô∏è",
            "meta-llama/llama-4-maverick-17b-128e-instruct": "LLaMA 4 maverick ü¶ôüî•",
            "compound-beta": "Compound beta",
            "compound-beta-mini": "Compound beta mini"
        }
    },
    "Grok": {
        "title": "üèÜ Grok",
        "models": {
            "grok-4-0709": "Grok 4"
        }
    },
    "GLM": {
        "title": "GLM Z",
        "models": {
            "GLM-4.5": "GLM 4.5",
            "GLM-4.5-X": "GLM 4.5 X",
            "GLM-4.5-Air": "GLM 4.5 Air"
        }
    }
}


GOOGLE_MODELS = ["gemini-2.5-pro", "gemini-2.5-flash", "gemini-2.0-flash", "gemini-2.0-flash-lite"]
DEEPSEEK_MODELS = ["deepseek-chat", "deepseek-reasoner"]
GROQ_MODELS = ["mistral-saba-24b", "meta-llama/llama-4-maverick-17b-128e-instruct", "deepseek-r1-distill-llama-70b", "compound-beta", "compound-beta-mini"]
GROK_MODELS = ["grok-4-0709"]
GLM_MODELS = ["GLM-4.5-Air", "GLM-4.5-X", "GLM-4.5"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
client = Client("GPTBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
openai.api_key = OPENAI_API_KEY
client_ai = OpenAI()
client_deepseek = OpenAI(
    base_url="https://api.deepseek.com",
    api_key=DEEPSEEK
    )

client_google = OpenAI(
    api_key=GEMINI_API_KEY,
    base_url="https://generativelanguage.googleapis.com/v1beta/openai/"
    )

client_groq = OpenAI(
    base_url="https://api.groq.com/openai/v1",
    api_key=GROQ_API
)

client_grok = OpenAI(
    base_url = "https://api.x.ai/v1",
    api_key=GROK_API
)

client_glm = OpenAI(
    base_url = "https://api.z.ai/api/paas/v4",
    api_key=GLM_API
)
state = {"client_now":client_ai}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
async def process_media_group(media_group_id: str, chat_id: str, client_instance):
    async with buffer_lock:
        if media_group_id not in media_group_buffers:
            return # –ì—Ä—É–ø–ø–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞

        grouped_messages = media_group_buffers[media_group_id]['messages']
        # –£–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –±—É—Ñ–µ—Ä–∞ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        del media_group_buffers[media_group_id]

    if not grouped_messages:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã) –∏ –∏—â–µ–º –ø–æ–¥–ø–∏—Å—å
    first_message = grouped_messages[0]
    caption = first_message.caption or "" # –ü–æ–¥–ø–∏—Å—å –æ–±—ã—á–Ω–æ —É –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    combined_content = None
    message_to_reply = first_message # –ë—É–¥–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ì—Ä—É–ø–ø—ã –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
    if first_message.photo:
        image_contents = []
        if caption: # –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
             image_contents.append({"type": "text", "text": caption})
        else: # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∏
             image_contents.append({"type": "text", "text": ""})


        processing_message = await client_instance.send_message(chat_id, f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(grouped_messages)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

        temp_files = []
        try:
            for msg in grouped_messages:
                if msg.photo:
                    file_path = await msg.download()
                    temp_files.append(file_path)
                    encoded_url = encode_image_as_base64(file_path) # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                    image_contents.append({"type": "image_url", "image_url": {"url": encoded_url}})

            combined_content = image_contents # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

        except Exception as e:
            await processing_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for f_path in temp_files:
                if os.path.exists(f_path):
                    os.remove(f_path)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."
            await processing_message.delete()


    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ì—Ä—É–ø–ø—ã –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
    elif first_message.document:
        all_texts = []
        doc_names = []
        processing_message = await client_instance.send_message(chat_id, f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(grouped_messages)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        temp_files = []
        try:
            for msg in grouped_messages:
                if msg.document:
                    file_path = await msg.download()
                    temp_files.append(file_path)
                    doc_names.append(os.path.basename(file_path))
                    ext = os.path.splitext(file_path)[1].lower()
                    doc_text = None

                    # –õ–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ handle_file)
                    if ext == ".txt":
                        async with aiofiles.open(file_path, "r", encoding="utf-8") as f:
                            doc_text = await f.read()
                    elif ext == ".docx":
                        doc = Document(file_path)
                        doc_text = "\n".join([p.text for p in doc.paragraphs])
                    elif ext == ".pptx":
                        prs = Presentation(file_path)
                        lines = [shape.text for slide in prs.slides for shape in slide.shapes if hasattr(shape, "text")]
                        doc_text = "\n".join(lines)
                    elif ext == ".fb2":
                        async with aiofiles.open(file_path, "r", encoding="utf-8") as f:
                             content = await f.read()
                             soup = BeautifulSoup(content, "lxml")
                             doc_text = soup.get_text(separator="\n", strip=True)
                    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

                    if doc_text:
                        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        if len(doc_text) > 20000:
                             doc_text = doc_text[:20000] + "\n... (—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—Ä–µ–∑–∞–Ω)"
                        all_texts.append(f"\n\n--- –¢–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)} ---\n{doc_text}")
                    else:
                         all_texts.append(f"\n\n--- –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)} ({ext}) ---")


            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            combined_text = (caption + "\n" if caption else "")
            combined_text += f"[–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(doc_names)}]"
            combined_text += "".join(all_texts)

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—â–µ–π –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
            if len(combined_text) > 40000:
                 combined_text = combined_text[:40000] + "\n... (–æ–±—â–∏–π —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–µ–∑–∞–Ω)"

            combined_content = combined_text # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Å—Ç—Ä–æ–∫–∞

        except Exception as e:
            await processing_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return
        finally:
             for f_path in temp_files:
                 if os.path.exists(f_path):
                     os.remove(f_path)
             await processing_message.delete()

    # --- –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
    if combined_content:
        # –í—ã–∑—ã–≤–∞–µ–º –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é process_message, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        # (–¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–≥–æ) –∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        await process_message(message_to_reply, combined_content)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –≤—Ö–æ–¥—è—â–∏—Ö –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
@client.on_message(filters.media_group)

async def media_group_handler(c: Client, message: Message):
    media_group_id = message.media_group_id
    chat_id = str(message.chat.id)

    async with buffer_lock:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        if media_group_id not in media_group_buffers:
            media_group_buffers[media_group_id] = {'messages': [message], 'timer_task': None}
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            task = asyncio.create_task(
                schedule_group_processing(media_group_id, chat_id, c)
            )
            media_group_buffers[media_group_id]['timer_task'] = task
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
            media_group_buffers[media_group_id]['messages'].append(message)
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä (–æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π)
            if media_group_buffers[media_group_id]['timer_task']:
                media_group_buffers[media_group_id]['timer_task'].cancel()
            task = asyncio.create_task(
                schedule_group_processing(media_group_id, chat_id, c)
            )
            media_group_buffers[media_group_id]['timer_task'] = task

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
async def schedule_group_processing(media_group_id: str, chat_id: str, client_instance):
    await asyncio.sleep(MEDIA_GROUP_DELAY)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ (–≤–¥—Ä—É–≥ –µ–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏–ª–∏)
    async with buffer_lock:
        if media_group_id in media_group_buffers:
             # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä—É–ø–ø—ã
             asyncio.create_task(process_media_group(media_group_id, chat_id, client_instance))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "sqlite:///gpt_bot_data.db" # –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
engine = create_engine(DATABASE_URL, echo=False) # echo=True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
Base = declarative_base()
SessionLocal = scoped_session(sessionmaker(autocommit=False, autoflush=False, bind=engine))

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Ç–∞–±–ª–∏—Ü
class Chat(Base):
    __tablename__ = "chats"
    chat_id = Column(String, primary_key=True, index=True) # –ò—Å–ø–æ–ª—å–∑—É–µ–º String –¥–ª—è chat_id
    model_name = Column(String, default="gpt-4o-mini")
    system_prompt = Column(Text, default="")
    # –°–≤—è–∑—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
    messages = relationship("Message", back_populates="chat", cascade="all, delete-orphan")

class Message(Base):
    __tablename__ = "messages"
    id = Column(Integer, primary_key=True, index=True)
    chat_id = Column(String, ForeignKey("chats.chat_id"), index=True)
    role = Column(String) # 'system', 'user', 'assistant'
    content = Column(JSON) # –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∫ —Ç–µ–∫—Å—Ç–∞, —Ç–∞–∫ –∏ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä (–¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫)
    timestamp = Column(DateTime, default=datetime.datetime.utcnow)
    # –°–≤—è–∑—å —Å —á–∞—Ç–æ–º
    chat = relationship("Chat", back_populates="messages")

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
Base.metadata.create_all(bind=engine)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—è–º–∏)
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



def encode_image_as_base64(path: str):
    with open(path, "rb") as f:
        encoded = base64.b64encode(f.read()).decode("utf-8")
    mime_type, _ = mimetypes.guess_type(path)
    return f"data:{mime_type};base64,{encoded}"




# –ö–æ–º–∞–Ω–¥–∞ /start
@client.on_message(filters.command("start"))
async def start(_, message: Message):
    chat_id = str(message.chat.id)
    db = next(get_db()) # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç
        existing_chat = db.execute(select(Chat).filter(Chat.chat_id == chat_id)).scalar_one_or_none()

        if existing_chat is None:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            new_chat = Chat(
                chat_id=chat_id,
                model_name="gpt-4.1-mini", # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                system_prompt=""          # –ü—É—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            db.add(new_chat)
            db.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            await message.reply_text("‚úÖ –ß–∞—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å GPT.")
        else:
            await message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    finally:
        db.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é

from pyrogram.types import BotCommand

@client.on_message(filters.command("update_commands"))
async def update_commands(_, message: Message):
    commands = [
        BotCommand("start", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å GPT"),
        BotCommand("forget", "–°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å (–∫–æ–Ω—Ç–µ–∫—Å—Ç)"),
        BotCommand("context", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"),
        BotCommand("model", "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å GPT"),
        BotCommand("gen", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ DALL¬∑E"),
        BotCommand("info", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("reset_context", "–£–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
    ]
    await client.set_bot_commands(commands)
    await message.reply_text("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")


# –ö–æ–º–∞–Ω–¥–∞ /forget
@client.on_message(filters.command("forget"))
async def forget(_, message: Message):
    chat_id = str(message.chat.id)
    db = next(get_db())
    try:
        chat = db.execute(select(Chat).filter(Chat.chat_id == chat_id)).scalar_one_or_none()
        if chat:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            db.query(Message).filter(Message.chat_id == chat_id).delete()
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # chat.system_prompt = ""
            db.commit()
            await message.reply_text("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç (–∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π) –æ—á–∏—â–µ–Ω.")
        else:
            await message.reply_text("‚ùó –ß–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
    finally:
        db.close()

@client.on_message(filters.command("context"))
async def ask_context(_, message: Message):
    user_states[message.chat.id] = "awaiting_context"

    cancel_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_context")]
    ])

    await message.reply_text("üß† –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.", reply_markup=cancel_button)

@client.on_message(filters.command("reset_context"))
async def reset_context(_, message: Message):
    chat_id = str(message.chat.id)
    db = next(get_db())

    try:
        chat = db.execute(select(Chat).filter(Chat.chat_id == chat_id)).scalar_one_or_none()

        if chat is None:
            await message.reply_text("‚ùó –ß–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
            return

        # –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ system_prompt
        chat.system_prompt = ""
        db.commit()

        await message.reply_text("üß† –°–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.")
    finally:
        db.close()

# –ö–æ–º–∞–Ω–¥–∞ /model —Å –∫–Ω–æ–ø–∫–∞–º–∏
@client.on_message(filters.command("model"))
async def choose_model(_, message: Message):
    buttons = [
        [InlineKeyboardButton(cat_data["title"], callback_data=f"cat:{cat_key}")]
        for cat_key, cat_data in MODEL_CATEGORIES.items()
    ]
    await message.reply(
        "üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

@client.on_callback_query(filters.regex(r"cat:(.+)"))
async def show_models_in_category(_, query):
    cat_key = query.data.split(":")[1]
    cat_data = MODEL_CATEGORIES.get(cat_key)

    if not cat_data:
        await query.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    model_buttons = [
        [InlineKeyboardButton(text=model_title, callback_data=f"model:{model_code}")]
        for model_code, model_title in cat_data["models"].items()
    ]
    model_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")])

    await query.edit_message_text(
        f"{cat_data['title']}\n\n–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:",
        reply_markup=InlineKeyboardMarkup(model_buttons)
    )

@client.on_callback_query(filters.regex("back_to_categories"))
async def back_to_categories(_, query):
    buttons = [
        [InlineKeyboardButton(cat_data["title"], callback_data=f"cat:{cat_key}")]
        for cat_key, cat_data in MODEL_CATEGORIES.items()
    ]
    await query.edit_message_text(
        "üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥–µ–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


@client.on_callback_query(filters.regex(r"model:"))
async def model_callback(_, query):
    model_name = query.data.split(":")[1]
    chat_id = str(query.message.chat.id)

    # –ù–∞—Ö–æ–¥–∏–º "–∫—Ä–∞—Å–∏–≤–æ–µ" –∏–º—è –º–æ–¥–µ–ª–∏ –ø–æ —Å–ª–æ–≤–∞—Ä—é
    pretty_name = next(
        (title for cat in MODEL_CATEGORIES.values() for code, title in cat["models"].items() if code == model_name),
        model_name  # fallback, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—ë–º
    )

    db = next(get_db())
    try:
        chat = db.execute(select(Chat).filter(Chat.chat_id == chat_id)).scalar_one_or_none()
        if chat is None:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π —á–∞—Ç: /start", show_alert=True)
            return

        if model_name in GOOGLE_MODELS:
            state["client_now"] = client_google
        elif model_name in DEEPSEEK_MODELS:
            state["client_now"] = client_deepseek
        elif model_name in GROQ_MODELS:
            state["client_now"] = client_groq
        elif model_name in GROK_MODELS:
            state["client_now"] = client_grok
        elif model_name in GLM_MODELS:
            state["client_now"] = client_glm
        else:
            state["client_now"] = client_ai

        chat.model_name = model_name
        db.commit()

        await query.edit_message_text(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{pretty_name}</b>", parse_mode=ParseMode.HTML)

    finally:
        db.close()


# –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç
# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, —Ñ–∞–π–ª, –∫–∞—Ä—Ç–∏–Ω–∫–∞)
async def process_message(message: Message, user_content: any):
    chat_id = str(message.chat.id)
    db = next(get_db())
    try:
        chat = db.execute(select(Chat).filter(Chat.chat_id == chat_id)).scalar_one_or_none()
        if chat is None:
            # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–Ω–æ –ª–∏–±–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ª–∏–±–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
            # await message.reply_text("‚ùó –ß–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
            return

        

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è API
        history_for_api = []
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if chat.system_prompt:
            history_for_api.append({"role": "system", "content": chat.system_prompt})

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20)
        # –í–∞–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤ API
        # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ content —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ JSON
        db_messages = db.execute(
            select(Message.role, Message.content)
            .filter(Message.chat_id == chat_id)
            .order_by(Message.timestamp.desc()) # –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
            .limit(20) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        ).fetchall()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
        for role, content in reversed(db_messages): # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
             history_for_api.append({"role": role, "content": content})

        history_for_api.append({"role": "user", "content": user_content})
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
        try:
            client_now = state["client_now"]
            resp = client_now.chat.completions.create(
                model=chat.model_name, # –ë–µ—Ä–µ–º –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
                messages=history_for_api
            )
            reply_content = resp.choices[0].message.content
            if not reply_content:
                raise ValueError("–≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å /model \n–∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é /forget")
            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
            # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            
            db.add(Message(chat_id=chat_id, role="user", content=user_content))
            db.add(Message(chat_id=chat_id, role="assistant", content=reply_content))
            db.commit()

            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
            if len(reply_content) <= MAX_LENGTH:
                await message.reply_text(reply_content)
            else:
                parts = [reply_content[i:i+MAX_LENGTH] for i in range(0, len(reply_content), MAX_LENGTH)]
                for i, part in enumerate(parts):
                    await message.reply_text(part)

        except Exception as e:
            await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ API —É–ø–∞–ª
            # db.rollback()

    finally:
        db.close()

# –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∏ –≤—ã–∑—ã–≤–∞–ª–∏ process_message

@client.on_message(filters.text & ~filters.command(["start", "forget", "context", "model", "gen", "info", "help"]))
async def chat_handler(_, message: Message):
    chat_id = message.chat.id
    state = user_states.get(chat_id)

    if state == "awaiting_context":
        db = next(get_db())
        try:
            chat = db.execute(select(Chat).filter(Chat.chat_id == str(chat_id))).scalar_one_or_none()
            if chat:
                chat.system_prompt = message.text
                db.commit()
                await message.reply_text("‚úÖ –ù–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            else:
                await message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start.")
        finally:
            db.close()
        user_states.pop(chat_id)
        return

    elif state == "awaiting_prompt":
        prompt = message.text
        imamess = await message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

        try:
            image = client_ai.images.generate(
                model="dall-e-3",
                prompt=prompt,
                n=1,
                size="1024x1024",
                quality="standard"
            )
            url = image.data[0].url

            await imamess.edit_text(
                f"üñº <b>–ì–æ—Ç–æ–≤–æ!</b>\n"
                f"prompt: <code>{image.data[0].revised_prompt}</code>\n\n"
                f"<a href='{url}'>üîó –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É</a>",
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–∫–∏
            )

        except Exception as e:
            await imamess.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

        user_states.pop(chat_id)
        return

    # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –∫ GPT
    await process_message(message, message.text)



@client.on_message(single_document_filter)
async def handle_file(_, message: Message):
    chat_id = str(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ process_message
    # –ù–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∑–¥–µ—Å—å

    file_path = await message.download()
    ext = os.path.splitext(file_path)[1].lower()
    text = None

    try:
        if ext == ".txt":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º aiofiles –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
            async with aiofiles.open(file_path, "r", encoding="utf-8") as f:
                text = await f.read()
        elif ext == ".docx":
            doc = Document(file_path)
            text = "\n".join([p.text for p in doc.paragraphs])
        elif ext == ".pptx":
            prs = Presentation(file_path)
            text_lines = []
            for slide in prs.slides:
                for shape in slide.shapes:
                    if hasattr(shape, "text"):
                        text_lines.append(shape.text)
            text = "\n".join(text_lines)
        elif ext == ".fb2":
             async with aiofiles.open(file_path, "r", encoding="utf-8") as f:
                content = await f.read()
                soup = BeautifulSoup(content, "lxml") # –∏–ª–∏ 'html.parser'
                text = soup.get_text(separator="\n", strip=True)
        else:
            await message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        if text:
            # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if len(text) > 40000: # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                text = text[:40000] + "\n... (—Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –æ–±—Ä–µ–∑–∞–Ω)"

            user_content = f"{message.caption or ''}\n[–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}]:\n{text}"
            await process_message(message, user_content) # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

    except Exception as e:
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)


@client.on_message(single_photo_filter)
async def handle_base64_image(_, message: Message):
    chat_id = str(message.chat.id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ process_message

    file_path = None
    try:
        file_path = await message.download()
        encoded_data_url = encode_image_as_base64(file_path) # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)
        user_content_list = [{"type": "image_url", "image_url": {"url": encoded_data_url}}]
        caption_text = message.caption or "–æ–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" # –¢–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∏
        user_content_list.append({"type": "text", "text": caption_text})

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await process_message(message, user_content_list)

    except Exception as e:
        await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    finally:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)

@client.on_message(filters.command("gen"))
async def ask_prompt(_, message: Message):
    user_states[message.chat.id] = "awaiting_prompt"

    cancel_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_gen")]
    ])

    await message.reply_text("üé® –í–≤–µ–¥–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=cancel_button)

@client.on_callback_query(filters.regex("cancel_context"))
async def cancel_context(_, query):
    chat_id = query.message.chat.id
    user_states.pop(chat_id, None)
    await query.message.delete()

@client.on_callback_query(filters.regex("cancel_gen"))
async def cancel_gen(_, query):
    chat_id = query.message.chat.id
    user_states.pop(chat_id, None)
    await query.message.delete()



# –ö–æ–º–∞–Ω–¥–∞ /info
@client.on_message(filters.command("info"))
async def info(_, message: Message):
    chat_id = str(message.chat.id)
    db = next(get_db())
    try:
        chat = db.execute(select(Chat).filter(Chat.chat_id == chat_id)).scalar_one_or_none()
        if chat is None:
            await message.reply_text("‚ùó –ß–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start.")
            return

        model = chat.model_name
        system_prompt = chat.system_prompt or "‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω." # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î

        text = (
            f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ</b>\n\n"
            f"ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> <code>{model}</code>\n"
            f"üß† <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b>\n<code>{system_prompt}</code>"
        )
        await message.reply_text(text, parse_mode=ParseMode.HTML)
    finally:
        db.close()

@client.on_message(filters.command("help"))
async def help_command(_, message: Message):
    help_text = (
        "ü§ñ <b>GPT Telegram –ë–æ—Ç ‚Äî —á—Ç–æ —è —É–º–µ—é</b>\n\n"

        "üìå <b>/start</b> ‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞\n"
        "‚û§ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞\n"
        "üìù –ü—Ä–∏–º–µ—Ä: <code>/start</code>\n\n"

        "üß† <b>/context</b> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
        "‚û§ –ó–∞–¥–∞—ë—Ç –±–æ—Ç—É –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–±—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏¬ª)\n"
        "üìù –ü—Ä–∏–º–µ—Ä: <code>/context –¢—ã ‚Äî –≤–µ—Å—ë–ª—ã–π –±–∞—Ä–¥, –≥–æ–≤–æ—Ä–∏—à—å —Å—Ç–∏—Ö–∞–º–∏</code>\n\n"

        "üßπ <b>/forget</b> ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è\n"
        "‚û§ –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "üìù –ü—Ä–∏–º–µ—Ä: <code>/forget</code>\n\n"

        "ü§ñ <b>/model</b> ‚Äî –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ GPT\n"
        "‚û§ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω–æ–π –º–æ–¥–µ–ª—å—é\n"
        "üìù –ü—Ä–∏–º–µ—Ä: <code>/model</code>\n\n"

        "üé® <b>/gen</b> ‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
        "‚û§ –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
        "üìù –ü—Ä–∏–º–µ—Ä:\n<code>/gen</code>\n<code>–∫–æ—à–∫–∞ –Ω–∞ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–µ</code>\n\n"

        "‚ÑπÔ∏è <b>/info</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "üìù –ü—Ä–∏–º–µ—Ä: <code>/info</code>\n\n"

        "üÜò <b>/help</b> ‚Äî –≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ –º–µ–Ω—é\n"
        "üìù –ü—Ä–∏–º–µ—Ä: <code>/help</code>\n\n"

        "<i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</i>\n"
        "üìÇ –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã .txt, .docx, .pptx, .fb2 ‚Äî –±–æ—Ç –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –∏ –æ—Ç–≤–µ—Ç–∏—Ç\n"
        "üñº –§–æ—Ç–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ ‚Äî –±–æ—Ç –æ–ø–∏—à–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–∞—Å—Ç –æ—Ç–≤–µ—Ç\n"
    )
    await message.reply_text(help_text, parse_mode=ParseMode.HTML)



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("ü§ñ GPT Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
client.run()